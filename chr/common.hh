// Copyright (c) 2022 Mikael Simonsson <https://mikaelsimonsson.com>.
// SPDX-License-Identifier: BSL-1.0

// # Common functions

#pragma once

#include "snn-core/array.hh"
#include "snn-core/math/common.hh"

namespace snn::chr
{
    // ## Constants

    // ### invalid

    inline constexpr u8 invalid = 255;

    namespace detail
    {
        // Lookup tables generated by: detail/common.gen.cc

        inline constexpr array<u8, 256> property_lookup{
            8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,
            8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
            112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 0,   0,   0,   0,   0,   0,
            0,   208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
            208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 0,   0,   0,   0,   0,
            0,   224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
            224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 0,   0,   0,   0,   8,
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
            0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
        };

        inline constexpr array<byte, 256> lowercase_lookup{
            0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,
            16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,
            32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,
            48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,
            64,  97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
            112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 91,  92,  93,  94,  95,
            96,  97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
            112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
            128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
            144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
            160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
            176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
            192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
            208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
            224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
            240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
        };

        inline constexpr array<byte, 256> uppercase_lookup{
            0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,
            16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,
            32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,
            48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,
            64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,
            80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,
            96,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,
            80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  123, 124, 125, 126, 127,
            128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
            144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
            160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
            176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
            192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
            208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
            224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
            240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
        };

        inline constexpr array<u8, 256> hex_lookup{
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   255, 255, 255, 255, 255, 255,
            255, 10,  11,  12,  13,  14,  15,  255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 10,  11,  12,  13,  14,  15,  255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        };
    }

    // ## Functions

    [[nodiscard]] constexpr bool is_alpha(const char c) noexcept
    {
        return static_cast<bool>(detail::property_lookup.at(to_byte(c), assume::within_bounds) &
                                 0b1000'0000u);
    }

    [[nodiscard]] constexpr bool is_alpha_lower(const char c) noexcept
    {
        return static_cast<byte>(to_byte(c) - 'a') <= ('z' - 'a');
    }

    [[nodiscard]] constexpr bool is_alpha_upper(const char c) noexcept
    {
        return static_cast<byte>(to_byte(c) - 'A') <= ('Z' - 'A');
    }

    [[nodiscard]] constexpr bool is_alphanumeric(const char c) noexcept
    {
        return static_cast<bool>(detail::property_lookup.at(to_byte(c), assume::within_bounds) &
                                 0b0100'0000u);
    }

    [[nodiscard]] constexpr bool is_alphanumeric_lower(const char c) noexcept
    {
        return static_cast<bool>(detail::property_lookup.at(to_byte(c), assume::within_bounds) &
                                 0b0010'0000u);
    }

    [[nodiscard]] constexpr bool is_alphanumeric_upper(const char c) noexcept
    {
        return static_cast<bool>(detail::property_lookup.at(to_byte(c), assume::within_bounds) &
                                 0b0001'0000u);
    }

    [[nodiscard]] constexpr bool is_ascii(const char c) noexcept
    {
        return to_byte(c) < 0x80;
    }

    [[nodiscard]] constexpr bool is_ascii_control(const char c) noexcept
    {
        // 0x00-0x1f (inclusive) or 0x7f.
        return static_cast<bool>(detail::property_lookup.at(to_byte(c), assume::within_bounds) &
                                 0b0000'1000u);
    }

    [[nodiscard]] constexpr bool is_ascii_control_or_space(const char c) noexcept
    {
        const auto b = to_byte(c);
        return b <= 0x20 || b == 0x7f;
    }

    [[nodiscard]] constexpr bool is_ascii_printable(const char c) noexcept
    {
        return static_cast<byte>(to_byte(c) - ' ') <= ('~' - ' ');
    }

    [[nodiscard]] constexpr bool is_binary(const char c) noexcept
    {
        return static_cast<byte>(to_byte(c) - '0') <= ('1' - '0');
    }

    [[nodiscard]] constexpr bool is_octal(const char c) noexcept
    {
        return static_cast<byte>(to_byte(c) - '0') <= ('7' - '0');
    }

    [[nodiscard]] constexpr bool is_digit(const char c) noexcept
    {
        return static_cast<byte>(to_byte(c) - '0') <= ('9' - '0');
    }

    [[nodiscard]] constexpr bool is_hex(const char c) noexcept
    {
        return detail::hex_lookup.at(to_byte(c), assume::within_bounds) != chr::invalid;
    }

    template <math::base Base>
    [[nodiscard]] constexpr bool is_base(const char) noexcept
    {
        static_assert(meta::always_false<decltype(Base)>, "Unsupported base.");
        return false;
    }

    template <>
    [[nodiscard]] constexpr bool is_base<math::base::binary>(const char c) noexcept
    {
        return is_binary(c);
    }

    template <>
    [[nodiscard]] constexpr bool is_base<math::base::octal>(const char c) noexcept
    {
        return is_octal(c);
    }

    template <>
    [[nodiscard]] constexpr bool is_base<math::base::decimal>(const char c) noexcept
    {
        return is_digit(c);
    }

    template <>
    [[nodiscard]] constexpr bool is_base<math::base::hex>(const char c) noexcept
    {
        return is_hex(c);
    }

    [[nodiscard]] constexpr u8 decode_binary(const char c) noexcept
    {
        return static_cast<u8>(to_byte(c) - '0');
    }

    [[nodiscard]] constexpr u8 decode_octal(const char c) noexcept
    {
        return static_cast<u8>(to_byte(c) - '0');
    }

    [[nodiscard]] constexpr u8 decode_digit(const char c) noexcept
    {
        return static_cast<u8>(to_byte(c) - '0');
    }

    [[nodiscard]] constexpr u8 decode_hex(const char c) noexcept
    {
        // Returns "chr::invalid" for invalid characters.
        return detail::hex_lookup.at(to_byte(c), assume::within_bounds);
    }

    template <math::base Base>
    [[nodiscard]] constexpr u8 decode_base(const char c) noexcept
    {
        using math::base;
        static_assert(Base == base::binary || Base == base::octal || Base == base::decimal);
        return static_cast<u8>(to_byte(c) - '0');
    }

    template <>
    [[nodiscard]] constexpr u8 decode_base<math::base::hex>(const char c) noexcept
    {
        return decode_hex(c);
    }

    [[nodiscard]] constexpr char to_alpha_lower(const char c) noexcept
    {
        // Safe for all characters, non-alpha will pass through unchanged.
        return to_char(detail::lowercase_lookup.at(to_byte(c), assume::within_bounds));
    }

    constexpr void to_alpha_lower_inplace(char& c) noexcept
    {
        c = to_alpha_lower(c);
    }

    [[nodiscard]] constexpr char to_alpha_upper(const char c) noexcept
    {
        // Safe for all characters, non-alpha will pass through unchanged.
        return to_char(detail::uppercase_lookup.at(to_byte(c), assume::within_bounds));
    }

    constexpr void to_alpha_upper_inplace(char& c) noexcept
    {
        c = to_alpha_upper(c);
    }
}
