// Copyright (c) 2022 Mikael Simonsson <https://mikaelsimonsson.com>.
// SPDX-License-Identifier: BSL-1.0

// # Common functions

#pragma once

#include "snn-core/array.hh"
#include "snn-core/chr/common.hh"

namespace snn::json::chr
{
    namespace detail
    {
        // Generated by: detail/chr.gen.cc

        inline constexpr array<u8, 256> property_lookup{
            2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 2, 2, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 5, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        };

    }

    // ## Functions

    // ### is_digit

    [[nodiscard]] constexpr bool is_digit(const char c) noexcept
    {
        return snn::chr::is_digit(c);
    }

    // ### is_non_special_ascii_string

    [[nodiscard]] constexpr bool is_non_special_ascii_string(const char c) noexcept
    {
        return static_cast<bool>(detail::property_lookup.at(to_byte(c), assume::within_bounds) &
                                 0b0000'0001);
    }

    // ### is_special_string

    [[nodiscard]] constexpr bool is_special_string(const char c) noexcept
    {
        return static_cast<bool>(detail::property_lookup.at(to_byte(c), assume::within_bounds) &
                                 0b0000'0010);
    }

    // ### is_whitespace

    [[nodiscard]] constexpr bool is_whitespace(const char c) noexcept
    {
        return static_cast<bool>(detail::property_lookup.at(to_byte(c), assume::within_bounds) &
                                 0b0000'0100);
    }
}
