// Copyright (c) 2022 Mikael Simonsson <https://mikaelsimonsson.com>.
// SPDX-License-Identifier: BSL-1.0

// # Infinite range of values generated by function

// This range does **not** cache values.

#pragma once

#include "snn-core/range/iter/forward.hh"

namespace snn::range
{
    // ## Classes

    // ### generate

    template <typename F>
    class generate final
    {
      public:
        constexpr explicit generate(F f) noexcept
            : f_{std::move(f)}
        {
        }

        constexpr explicit operator bool() const noexcept
        {
            return !is_empty();
        }

        [[nodiscard]] constexpr auto begin()
        {
            if constexpr (std::is_copy_constructible_v<F>)
            {
                return iter::forward<generate>{*this};
            }
            else
            {
                return iter::forward_reference<generate>{*this};
            }
        }

        [[nodiscard]] static constexpr auto end() noexcept
        {
            return iter::forward_end{};
        }

        constexpr void drop_front(assume::not_empty_t) noexcept
        {
        }

        [[nodiscard]] constexpr decltype(auto) front(assume::not_empty_t)
        {
            return f_();
        }

        [[nodiscard]] constexpr decltype(auto) front(assume::not_empty_t) const
        {
            return f_();
        }

        [[nodiscard]] constexpr bool is_empty() const noexcept
        {
            return false;
        }

      private:
        F f_;
    };
}
